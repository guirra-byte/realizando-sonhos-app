generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id                  Int     @id @default(autoincrement())
  name                String  @unique
  birthDate           String
  additionalInfos     String?
  schoolYear          String
  shift               String
  guardian            String
  guardianCPF         String
  guardianPhoneNumber String

  parents     Parent[]           @relation("ParentToStudent")
  attendances AttendanceRecord[]

  class   Class?  @relation(fields: [classId], references: [id])
  classId String?

  @@map("students")
}

model AllowedUsers {
  id        String @id @default(uuid())
  name      String
  email     String @unique
  invitedBy String @map("invited_by")

  createdAt   DateTime  @default(now()) @map("created_at")
  lastLoginAt DateTime? @map("last_login_at")

  @@map("allowed_users")
}

model Class {
  id          String  @id @default(uuid())
  name        String  @unique
  minAge      Int?
  maxAge      Int?
  description String?

  students         Student[]
  AttendanceRecord AttendanceRecord[]

  @@map("class")
}

model AttendanceRecord {
  id        String    @id
  date      DateTime  @default(now())
  arrived   Boolean   @default(false)
  arrivedAt DateTime?

  Class     Class?   @relation(fields: [classId], references: [id])
  classId   String?
  Student   Student? @relation(fields: [studentId], references: [id])
  studentId Int?

  @@map("attendance_record")
}

model Parent {
  id          String     @id
  phoneNumber String
  type        ParentType
  isGuardian  Boolean    @default(false)
  guardianCPF String
  name        String     @unique

  Payment  Payment[]
  children Student[] @relation("ParentToStudent")

  @@map("parents")
}

model Payment {
  id        String        @id
  amount    Int
  monthTag  String
  status    PaymentStatus @default(UNPAID)
  ownerId   String
  studentId String
  owner     Parent        @relation(fields: [ownerId], references: [id])
}

enum PaymentStatus {
  PAID
  UNPAID
}

enum ParentType {
  MOTHER
  FATHER
}
