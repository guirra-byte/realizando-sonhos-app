generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Student {
  id                  Int                @id @default(autoincrement())
  name                String             @unique
  birthDate           String
  additionalInfos     String?            @map("additional_infos")
  schoolYear          String             @map("school_year")
  shift               String
  guardian            String
  guardianCPF         String             @map("guardian_cpf")
  guardianPhoneNumber String             @map("guardian_phone_number")
  classId             Int?
  attendances         AttendanceRecord[]
  NoticeFactor        NoticeFactor[]
  class               Class?             @relation(fields: [classId], references: [id])

  @@map("students")
}

model AllowedUsers {
  id          String    @id @default(uuid())
  name        String
  email       String    @unique
  invitedBy   String    @map("invited_by")
  createdAt   DateTime  @default(now()) @map("created_at")
  lastLoginAt DateTime? @map("last_login_at")

  @@map("allowed_users")
}

model Class {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  Master           Master[]
  AttendanceRecord AttendanceRecord[]
  students         Student[]

  @@map("class")
}

model NoticeFactor {
  id                 String            @id @default(uuid())
  at                 DateTime          @default(now())
  type               FactorType        @default(POSITIVE)
  description        String
  from               Int
  to                 Int
  attendanceRecordId String?           @map("attendance_record_id")
  AttendanceRecord   AttendanceRecord? @relation(fields: [attendanceRecordId], references: [id])
  Master             Master            @relation(fields: [from], references: [id])
  Student            Student           @relation(fields: [to], references: [id])

  @@map("notice_factors")
}

model Master {
  id                Int                @id @default(autoincrement())
  name              String
  email             String             @unique
  status            MasterStatus       @default(ACTIVE)
  phoneNumber       String             @unique @map("phone_number")
  myClass           Int                @map("my_class")
  Class             Class              @relation(fields: [myClass], references: [id])
  attendanceRecords AttendanceRecord[]
  noticeFactor      NoticeFactor[]
}

model AttendanceRecord {
  id            String         @id
  date          DateTime       @default(now())
  present       Boolean        @default(false)
  masterId      Int
  classId       Int?
  studentId     Int?
  Class         Class?         @relation(fields: [classId], references: [id])
  Master        Master         @relation(fields: [masterId], references: [id])
  Student       Student?       @relation(fields: [studentId], references: [id])
  noticeFactors NoticeFactor[]

  @@map("attendance_records")
}

enum FactorType {
  POSITIVE
  NEGATIVE
}

enum MasterStatus {
  ACTIVE
  UNACTIVE
}
